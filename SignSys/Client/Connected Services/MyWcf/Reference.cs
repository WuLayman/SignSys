//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MyWcf {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyWcf.IService", CallbackContract=typeof(Client.MyWcf.IServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Login")]
        void Login(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Login")]
        System.Threading.Tasks.Task LoginAsync(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Update")]
        void Update(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Update")]
        System.Threading.Tasks.Task UpdateAsync(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Leave")]
        void Leave(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Leave")]
        System.Threading.Tasks.Task LeaveAsync(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPerosnInfoToServer", ReplyAction="http://tempuri.org/IService/SendPerosnInfoToServerResponse")]
        bool SendPerosnInfoToServer(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPerosnInfoToServer", ReplyAction="http://tempuri.org/IService/SendPerosnInfoToServerResponse")]
        System.Threading.Tasks.Task<bool> SendPerosnInfoToServerAsync(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPictureInfoToServer", ReplyAction="http://tempuri.org/IService/SendPictureInfoToServerResponse")]
        bool SendPictureInfoToServer(I_communication_component.MyWcf.PictureInfo pictureInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendPictureInfoToServer", ReplyAction="http://tempuri.org/IService/SendPictureInfoToServerResponse")]
        System.Threading.Tasks.Task<bool> SendPictureInfoToServerAsync(I_communication_component.MyWcf.PictureInfo pictureInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendChangePersonInfoToDB", ReplyAction="http://tempuri.org/IService/SendChangePersonInfoToDBResponse")]
        bool SendChangePersonInfoToDB(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendChangePersonInfoToDB", ReplyAction="http://tempuri.org/IService/SendChangePersonInfoToDBResponse")]
        System.Threading.Tasks.Task<bool> SendChangePersonInfoToDBAsync(I_communication_component.MyWcf.PersonInfo personInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendSignInfoToServer", ReplyAction="http://tempuri.org/IService/SendSignInfoToServerResponse")]
        bool SendSignInfoToServer(I_communication_component.MyWcf.PersonSignInfo signInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendSignInfoToServer", ReplyAction="http://tempuri.org/IService/SendSignInfoToServerResponse")]
        System.Threading.Tasks.Task<bool> SendSignInfoToServerAsync(I_communication_component.MyWcf.PersonSignInfo signInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendStateInfoToServer", ReplyAction="http://tempuri.org/IService/SendStateInfoToServerResponse")]
        bool SendStateInfoToServer(string userNickName, I_communication_component.MyWcf.PersonStateInfo state, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendStateInfoToServer", ReplyAction="http://tempuri.org/IService/SendStateInfoToServerResponse")]
        System.Threading.Tasks.Task<bool> SendStateInfoToServerAsync(string userNickName, I_communication_component.MyWcf.PersonStateInfo state, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendAllSignInfoToClient", ReplyAction="http://tempuri.org/IService/SendAllSignInfoToClientResponse")]
        bool SendAllSignInfoToClient(I_communication_component.MyWcf.PersonSignInfo[] allSignInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendAllSignInfoToClient", ReplyAction="http://tempuri.org/IService/SendAllSignInfoToClientResponse")]
        System.Threading.Tasks.Task<bool> SendAllSignInfoToClientAsync(I_communication_component.MyWcf.PersonSignInfo[] allSignInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveMacAddress", ReplyAction="http://tempuri.org/IService/ReceiveMacAddressResponse")]
        string ReceiveMacAddress(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveMacAddress", ReplyAction="http://tempuri.org/IService/ReceiveMacAddressResponse")]
        System.Threading.Tasks.Task<string> ReceiveMacAddressAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceivePictureFromServer", ReplyAction="http://tempuri.org/IService/ReceivePictureFromServerResponse")]
        I_communication_component.MyWcf.PictureInfo ReceivePictureFromServer(string useName, I_communication_component.MyWcf.TimetableAndExpPic ttAndEP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceivePictureFromServer", ReplyAction="http://tempuri.org/IService/ReceivePictureFromServerResponse")]
        System.Threading.Tasks.Task<I_communication_component.MyWcf.PictureInfo> ReceivePictureFromServerAsync(string useName, I_communication_component.MyWcf.TimetableAndExpPic ttAndEP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveSignInfoFromServer", ReplyAction="http://tempuri.org/IService/ReceiveSignInfoFromServerResponse")]
        bool ReceiveSignInfoFromServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveSignInfoFromServer", ReplyAction="http://tempuri.org/IService/ReceiveSignInfoFromServerResponse")]
        System.Threading.Tasks.Task<bool> ReceiveSignInfoFromServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveAllSignInfoFromServer", ReplyAction="http://tempuri.org/IService/ReceiveAllSignInfoFromServerResponse")]
        I_communication_component.MyWcf.PersonSignInfo[] ReceiveAllSignInfoFromServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveAllSignInfoFromServer", ReplyAction="http://tempuri.org/IService/ReceiveAllSignInfoFromServerResponse")]
        System.Threading.Tasks.Task<I_communication_component.MyWcf.PersonSignInfo[]> ReceiveAllSignInfoFromServerAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ShowMessage", ReplyAction="http://tempuri.org/IService/ShowMessageResponse")]
        void ShowMessage(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.MyWcf.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<Client.MyWcf.IService>, Client.MyWcf.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(I_communication_component.MyWcf.PersonInfo personInfo) {
            base.Channel.Login(personInfo);
        }
        
        public System.Threading.Tasks.Task LoginAsync(I_communication_component.MyWcf.PersonInfo personInfo) {
            return base.Channel.LoginAsync(personInfo);
        }
        
        public void Update(I_communication_component.MyWcf.PersonInfo personInfo) {
            base.Channel.Update(personInfo);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(I_communication_component.MyWcf.PersonInfo personInfo) {
            return base.Channel.UpdateAsync(personInfo);
        }
        
        public void Leave(I_communication_component.MyWcf.PersonInfo personInfo) {
            base.Channel.Leave(personInfo);
        }
        
        public System.Threading.Tasks.Task LeaveAsync(I_communication_component.MyWcf.PersonInfo personInfo) {
            return base.Channel.LeaveAsync(personInfo);
        }
        
        public bool SendPerosnInfoToServer(I_communication_component.MyWcf.PersonInfo personInfo) {
            return base.Channel.SendPerosnInfoToServer(personInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SendPerosnInfoToServerAsync(I_communication_component.MyWcf.PersonInfo personInfo) {
            return base.Channel.SendPerosnInfoToServerAsync(personInfo);
        }
        
        public bool SendPictureInfoToServer(I_communication_component.MyWcf.PictureInfo pictureInfo) {
            return base.Channel.SendPictureInfoToServer(pictureInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SendPictureInfoToServerAsync(I_communication_component.MyWcf.PictureInfo pictureInfo) {
            return base.Channel.SendPictureInfoToServerAsync(pictureInfo);
        }
        
        public bool SendChangePersonInfoToDB(I_communication_component.MyWcf.PersonInfo personInfo) {
            return base.Channel.SendChangePersonInfoToDB(personInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SendChangePersonInfoToDBAsync(I_communication_component.MyWcf.PersonInfo personInfo) {
            return base.Channel.SendChangePersonInfoToDBAsync(personInfo);
        }
        
        public bool SendSignInfoToServer(I_communication_component.MyWcf.PersonSignInfo signInfo) {
            return base.Channel.SendSignInfoToServer(signInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SendSignInfoToServerAsync(I_communication_component.MyWcf.PersonSignInfo signInfo) {
            return base.Channel.SendSignInfoToServerAsync(signInfo);
        }
        
        public bool SendStateInfoToServer(string userNickName, I_communication_component.MyWcf.PersonStateInfo state, string message) {
            return base.Channel.SendStateInfoToServer(userNickName, state, message);
        }
        
        public System.Threading.Tasks.Task<bool> SendStateInfoToServerAsync(string userNickName, I_communication_component.MyWcf.PersonStateInfo state, string message) {
            return base.Channel.SendStateInfoToServerAsync(userNickName, state, message);
        }
        
        public bool SendAllSignInfoToClient(I_communication_component.MyWcf.PersonSignInfo[] allSignInfo) {
            return base.Channel.SendAllSignInfoToClient(allSignInfo);
        }
        
        public System.Threading.Tasks.Task<bool> SendAllSignInfoToClientAsync(I_communication_component.MyWcf.PersonSignInfo[] allSignInfo) {
            return base.Channel.SendAllSignInfoToClientAsync(allSignInfo);
        }
        
        public string ReceiveMacAddress(string userName) {
            return base.Channel.ReceiveMacAddress(userName);
        }
        
        public System.Threading.Tasks.Task<string> ReceiveMacAddressAsync(string userName) {
            return base.Channel.ReceiveMacAddressAsync(userName);
        }
        
        public I_communication_component.MyWcf.PictureInfo ReceivePictureFromServer(string useName, I_communication_component.MyWcf.TimetableAndExpPic ttAndEP) {
            return base.Channel.ReceivePictureFromServer(useName, ttAndEP);
        }
        
        public System.Threading.Tasks.Task<I_communication_component.MyWcf.PictureInfo> ReceivePictureFromServerAsync(string useName, I_communication_component.MyWcf.TimetableAndExpPic ttAndEP) {
            return base.Channel.ReceivePictureFromServerAsync(useName, ttAndEP);
        }
        
        public bool ReceiveSignInfoFromServer() {
            return base.Channel.ReceiveSignInfoFromServer();
        }
        
        public System.Threading.Tasks.Task<bool> ReceiveSignInfoFromServerAsync() {
            return base.Channel.ReceiveSignInfoFromServerAsync();
        }
        
        public I_communication_component.MyWcf.PersonSignInfo[] ReceiveAllSignInfoFromServer() {
            return base.Channel.ReceiveAllSignInfoFromServer();
        }
        
        public System.Threading.Tasks.Task<I_communication_component.MyWcf.PersonSignInfo[]> ReceiveAllSignInfoFromServerAsync() {
            return base.Channel.ReceiveAllSignInfoFromServerAsync();
        }
    }
}
